mutate(STUDY_ID2 = str_sub(level, start = -3),
# drop underscores
STUDY_ID = sub('_','', STUDY_ID2),
# remove study
bt = str_remove(level, STUDY_ID2),
# remove trailing underscore
bt = sub('_$', '', bt)) %>%
# ok, now use existing hacky code to separate biome and taxa
separate(bt, c('b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 't'), remove=F, sep='_') %>%
mutate(taxa_mod = ifelse(!is.na(t), t,
ifelse(!is.na(b7), b7,
ifelse(!is.na(b6), b6,
ifelse(!is.na(b5), b5,
ifelse(!is.na(b4), b4,
ifelse(!is.na(b3), b3, b2)))))),
b7 = ifelse(b7==taxa_mod, '', b7),
Biome = ifelse(is.na(b3), b1,
ifelse(is.na(b4), paste(b1, b2, sep='_'),
ifelse(is.na(b5), paste(b1, b2, b3, sep='_'),
ifelse(is.na(b6), paste(b1, b2, b3, b4, sep='_'),
ifelse(is.na(b7), paste(b1, b2, b3, b4, b5, sep='_'),
paste(b1, b2, b3, b4, b5, b6, b7, sep='_'))))))) %>%
select(-b1, -b2, -b3, -b4, -b5, -b6, -b7, -t, -STUDY_ID2)
# put the meta data in
study_corr <- left_join(study_corr,
meta %>% mutate(STUDY_ID = as.character(STUDY_ID)),
by = c('Biome', 'taxa_mod', 'STUDY_ID'))
# some studies have not got there realm information
missing <- study_corr %>%
filter(is.na(REALM)) %>%
distinct(STUDY_ID)
# check the realm of these studies
meta %>%
filter(STUDY_ID %in% missing$STUDY_ID) %>%
distinct(REALM) # they are all terrestrial...
# change all the missing realms to terrestrial
study_corr <- study_corr %>%
mutate(REALM = ifelse(is.na(REALM), 'Terrestrial', REALM))
study_corr <- study_corr %>%
mutate(Jtu_grt_Jne = ifelse(deltaJtu > deltaJne, 'Jtu > Jne', 'Jne > Jtu'))
# add another indicator for quadrant conceptual model (four colours: Jne>Jtu & S < 0, Jne>Jtu & S>0, etc)
study_corr <- study_corr %>%
mutate(quad = ifelse((Jtu_grt_Jne=='Jtu > Jne' & deltaS < 0), 'c1',
ifelse((Jtu_grt_Jne=='Jtu > Jne' & deltaS > 0), 'c2',
ifelse((Jtu_grt_Jne=='Jne > Jtu' & deltaS < 0), 'c3', 'c4'))),
quad_sig = ifelse((Jtu_grt_Jne=='Jtu > Jne' & deltaS_upper < 0 & deltaJtu_lower > 0), 'c1_sig',
ifelse((Jtu_grt_Jne=='Jtu > Jne' & deltaS_lower > 0 & deltaJtu_lower > 0), 'c2_sig',
ifelse((Jtu_grt_Jne=='Jne > Jtu' & deltaS_upper < 0 & deltaJne_lower > 0), 'c3_sig',
ifelse((Jtu_grt_Jne=='Jne > Jtu' & deltaS_lower > 0 & deltaJne_lower > 0), 'c4_sig', quad)))))
# create some covariates for plotting whether changes differ from zero
study_corr <- study_corr %>%
mutate(alphaS = ifelse((deltaS_lower < 0 & deltaS_upper > 0), 0.95, 1),
alphaJtu = ifelse((deltaJtu_lower < 0 & deltaJtu_upper > 0), 0.95, 1),
alphaJne = ifelse((deltaJne_lower < 0 & deltaJne_upper > 0), 0.95, 1),
ab_sig = ifelse(((Jtu_grt_Jne=='Jtu > Jne' & alphaJtu==1 & alphaS==1) |
(Jtu_grt_Jne=='Jne > Jtu' & alphaJne==1 & alphaS==1)), 1, 0.95))
study_corr <- study_corr %>%
mutate(strokeS = ifelse(alphaS==1, 1.1, 1),
sizeS = ifelse(alphaS==1, 2, .5),
# set stroke and size for points where both alpha and beta differ from zero
strokeBLUE = ifelse((Jtu_grt_Jne=='Jtu > Jne' & alphaS==1 & alphaJtu==1), 1.1, 1),
strokeGREEN = ifelse((Jtu_grt_Jne=='Jne > Jtu' & alphaS==1 & alphaJne==1), 1.1, 1),
# make points large if both change in dissimilarity and richness differ from zero
sizeBLUE = ifelse((Jtu_grt_Jne=='Jtu > Jne' & alphaS==1 & alphaJtu==1), 2, .5),
sizeGREEN = ifelse((Jtu_grt_Jne=='Jne > Jtu' & alphaS==1 & alphaJne==1), 2, .5))
study_corr
## get model coefs for models fit with study-level varying coefs only
##------data and libraries-----------------------
rm(list=ls())
library(brms)
library(dplyr)
#library(broom)
library(tidyr)
library(tibble)
#----load data
##----count data only, whole time period--------
load('~/Dropbox/1current/BioTime/multidimensionalChangeMS/data_model_fits/N_lognorm_STUDY-5366358.Rdata')
##--species richness coefficients and random effects---------
N_lnorm_global <- fixef(N_lognorm_STUDY, robust = TRUE, probs = c(0.05, 0.95)) %>%
as_tibble() %>%
mutate(
model = 'N_lnorm',
time_period = 'ALL')
names(N_lnorm_global)[3:4] <- c('lower', 'upper')
N_lnorm_global <- N_lnorm_global %>%
mutate(
change = ifelse(lower > 0, 'up',
ifelse(upper < 0, 'down', 'neutral')))
N_lnorm_global
N_lnorm_groupCoefs <- coef(N_lognorm_STUDY, robust = TRUE, probs = c(0.05, 0.95))
as_tibble(N_lnorm_groupCoefs[[1]]) %>%
mutate(level = rownames(N_lnorm_groupCoefs[[1]]))
##  break into study and rarefyID estimates
N_lnorm_studyID <- as_tibble(N_lnorm_groupCoefs[[1]]) %>%
mutate(STUDY_ID = rownames(N_lnorm_groupCoefs[[1]]))
N_lnorm_rarefyID <- as_tibble(N_lnorm_groupCoefs[[2]]) %>%
mutate(rarefyID = rownames(N_lnorm_groupCoefs[[2]]))
N_lnorm_rarefyID
N_lnorm_rarefyID <- as_tibble(N_lnorm_groupCoefs[[2]]) %>%
mutate(level = rownames(N_lnorm_groupCoefs[[2]]))
N_lnorm_rarefyID
N_lognorm_STUDY$data %>% head
rm(list=N_lognorm_STUDY)
rm(N_lognorm_STUDY)
load('~/Dropbox/1current/BioTime/multidimensionalChangeMS/data_model_fits/ENSPIE_lognorm_study-5366357.Rdata')
##--evenness coefficients and random effects---------
ENSPIE_lnorm_global <- fixef(ENSPIE_lognorm_STUDY, robust = TRUE, probs = c(0.05, 0.95)) %>%
as_tibble() %>%
mutate(
model = 'ENSPIE_lnorm',
time_period = 'ALL')
names(ENSPIE_lnorm_global)[3:4] <- c('lower', 'upper')
ENSPIE_lnorm_global <- ENSPIE_lnorm_global %>%
mutate(
change = ifelse(lower > 0, 'up',
ifelse(upper < 0, 'down', 'neutral')))
ENSPIE_lnorm_global
ENSPIE_lnorm_groupCoefs <- coef(ENSPIE_lognorm_STUDY, robust = TRUE, probs = c(0.05, 0.95))
##  break into study and rarefyID estimates
ENSPIE_lnorm_studyID <- as_tibble(ENSPIE_lnorm_groupCoefs[[1]]) %>%
mutate(STUDY_ID = rownames(ENSPIE_lnorm_groupCoefs[[1]]))
names(ENSPIE_lnorm_studyID)[c(3:4, 7:8)] <- c('lower_intercept', 'upper_intercept', 'lower_slope', 'upper_slope')
ENSPIE_lnorm_studyID <- ENSPIE_lnorm_studyID %>%
mutate(
model = 'ENSPIE_lnorm',
time_period = 'ALL',
change = ifelse(lower_slope > 0, 'up',
ifelse(upper_slope < 0, 'down', 'neutral')))
ENSPIE_lnorm_rarefyID <- as_tibble(ENSPIE_lnorm_groupCoefs[[2]]) %>%
mutate(level = rownames(ENSPIE_lnorm_groupCoefs[[2]]))
names(ENSPIE_lnorm_rarefyID)[c(3:4, 7:8)] <- c('lower_intercept', 'upper_intercept', 'lower_slope', 'upper_slope')
ENSPIE_lnorm_rarefyID <- ENSPIE_lnorm_rarefyID %>%
mutate(
model = 'ENSPIE_lnorm',
time_period = 'ALL',
change = ifelse(lower_slope > 0, 'up',
ifelse(upper_slope < 0, 'down', 'neutral')))
##  break into study and rarefyID estimates
N_lnorm_studyID <- as_tibble(N_lnorm_groupCoefs[[1]]) %>%
mutate(STUDY_ID = rownames(N_lnorm_groupCoefs[[1]]))
names(N_lnorm_studyID)[c(3:4, 7:8)] <- c('lower_intercept', 'upper_intercept', 'lower_slope', 'upper_slope')
N_lnorm_studyID <- N_lnorm_studyID %>%
mutate(
model = 'N_lnorm',
time_period = 'ALL',
change = ifelse(lower_slope > 0, 'up',
ifelse(upper_slope < 0, 'down', 'neutral')))
N_lnorm_rarefyID <- as_tibble(N_lnorm_groupCoefs[[2]]) %>%
mutate(level = rownames(N_lnorm_groupCoefs[[2]]))
names(N_lnorm_rarefyID)[c(3:4, 7:8)] <- c('lower_intercept', 'upper_intercept', 'lower_slope', 'upper_slope')
N_lnorm_rarefyID <- N_lnorm_rarefyID %>%
mutate(
model = 'N_lnorm',
time_period = 'ALL',
change = ifelse(lower_slope > 0, 'up',
ifelse(upper_slope < 0, 'down', 'neutral')))
N_lnorm_rarefyID
ENSPIE_lnorm_studyID
ENSPIE_lnorm_studyID %>% filter(change!='neutral')
##----- get raw data and process for metadata--------
load('~/Dropbox/BiogeoBioTIME/rarefied_medians.Rdata')
cell_count <- rarefied_medians %>%
group_by(STUDY_ID) %>%
dplyr::summarise(n_cells = n_distinct(rarefyID)) %>%
ungroup()
##	rejoin
rarefied_medians <- left_join(cell_count, rarefied_medians, by=c('STUDY_ID'))
##	filter to count data and biome/taxa combinations with >3 cells
# these are the data that the model was fit to
rarefied_medians <- rarefied_medians %>%
filter(BROAD_TYPE=='count') %>%
# simplify realm covariate for plotting
mutate(Realm2 = ifelse(REALM!='Marine', 'Terrestrial/Freshwater', 'Marine'))
ENSPIE_lnorm_studyID
pp_check(ENSPIE_lognorm_STUDY) + scale_x_continuous(trans='log2')
library(tidyverse)#----load data
library(brms)
pp_check(ENSPIE_lognorm_STUDY) + scale_x_continuous(trans='log2')
?`brms-package`
rarefied_medians %>% summarise(min(ENSPIE))
rarefied_medians %>% summarise(min(N))
#----load data
##----count data only, whole time period--------
load('~/Dropbox/1current/BioTime/multidimensionalChangeMS/data_model_fits/N_lognorm_STUDY-5366358.Rdata')
pp_check(N_lognorm_STUDY) + scale_x_continuous(trans='log2')
rarefied_medians %>% summarise(min(S))
rarefied_medians %>% summarise(max(S))
load('~/Dropbox/1current/BioTime/multidimensionalChangeMS/data_model_fits/S_pois_study-5366359.Rdata')
rm(N_lognorm_STUDY)
rm(ENSPIE_lognorm_STUDY)
##--evenness coefficients and random effects---------
S_pois_global <- fixef(ENSPIE_lognorm_STUDY, robust = TRUE, probs = c(0.05, 0.95)) %>%
as_tibble() %>%
mutate(
model = 'S_pois',
time_period = 'ALL')
##--evenness coefficients and random effects---------
S_pois_global <- fixef(S_pois_STUDY, robust = TRUE, probs = c(0.05, 0.95)) %>%
as_tibble() %>%
mutate(
model = 'S_pois',
time_period = 'ALL')
names(S_pois_global)[3:4] <- c('lower', 'upper')
S_pois_global <- S_pois_global %>%
mutate(
change = ifelse(lower > 0, 'up',
ifelse(upper < 0, 'down', 'neutral')))
S_pois_global
S_pois_groupCoefs <- coef(S_pois_STUDY, robust = TRUE, probs = c(0.05, 0.95))
##  break into study and rarefyID estimates
S_pois_studyID <- as_tibble(S_pois_groupCoefs[[1]]) %>%
mutate(STUDY_ID = rownames(S_pois_groupCoefs[[1]]))
names(S_pois_studyID)[c(3:4, 7:8)] <- c('lower_intercept', 'upper_intercept', 'lower_slope', 'upper_slope')
S_pois_studyID <- S_pois_studyID %>%
mutate(
model = 'S_pois',
time_period = 'ALL',
change = ifelse(lower_slope > 0, 'up',
ifelse(upper_slope < 0, 'down', 'neutral')))
S_pois_rarefyID <- as_tibble(S_pois_groupCoefs[[2]]) %>%
mutate(level = rownames(S_pois_groupCoefs[[2]]))
names(S_pois_rarefyID)[c(3:4, 7:8)] <- c('lower_intercept', 'upper_intercept', 'lower_slope', 'upper_slope')
S_pois_rarefyID <- S_pois_rarefyID %>%
mutate(
model = 'S_pois',
time_period = 'ALL',
change = ifelse(lower_slope > 0, 'up',
ifelse(upper_slope < 0, 'down', 'neutral')))
alpha_global_studyOnly <- bind_rows(N_lnorm_global,
ENSPIE_lnorm_global,
S_pois_global)
alpha_global_studyOnly
exp(0.00207)
exp(.2)
alpha_study_studyOnly <- bind_rows(N_lnorm_studyID,
ENSPIE_lnorm_studyID,
S_pois_studyID)
alpha_study_studyOnly
alpha_cell_studyOnly <- bind_rows(N_lnorm_rarefyID,
ENSPIE_lnorm_rarefyID,
S_pois_rarefyID)
save('~/Dropbox/1current/BioTime/multidimensionalChangeMS/data_model_fits/alpha_coefs_studyOnly.Rdata')
save(alpha_global_studyOnly,
alpha_study_studyOnly,
alpha_cell_studyOnly,
'~/Dropbox/1current/BioTime/multidimensionalChangeMS/data_model_fits/alpha_coefs_studyOnly.Rdata')
save(alpha_global_studyOnly,
alpha_study_studyOnly,
alpha_cell_studyOnly,
file = '~/Dropbox/1current/BioTime/multidimensionalChangeMS/data_model_fits/alpha_coefs_studyOnly.Rdata')
S_pois_studyID %>% filter(change!='neutral')
N_lnorm_studyID %>% filter(change!='neutral')
ENSPIE_lnorm_studyID %>% filter(change!='neutral')
# code to get geography for plotting study estimates: get one or more points for biome-taxa-study combinations
source('~/Dropbox/1current/BioTime/BioGeo-BioDiv-Change/R/bt/code/02b_studyLevel_coef_wrangle.R')
world <- map_data('world')
# function to find the convex hull of a polygon
find_hull <- function(df) df[chull(df$rarefyID_x, df$rarefyID_y), ]
# function to find centre of hull
hull_centre <- function(rarefyID_x, rarefyID_y){
hc_x = geosphere::geomean(cbind(x = rarefyID_x, y = rarefyID_y))[1]
hc_y = geosphere::geomean(cbind(x = rarefyID_x, y = rarefyID_y))[2]
return(cbind.data.frame(hc_x, hc_y))
}
##  get unique coords for each biome, taxa combination
studies_ <- BT_study_estimate %>%
distinct(STUDY_ID)
studies_
coords <- rarefied_medians %>%
distinct(REALM, Biome, taxa_mod, STUDY_ID, rarefyID, rarefyID_x, rarefyID_y) %>%
# filter to the studies for which we have study-level slope estimates
filter(STUDY_ID %in% studies_$STUDY_ID)
coords
##--------marine realm wrangle------------------
marine_hulls <- plyr::ddply(filter(coords, REALM=='Marine'),
plyr::.(REALM, Biome, taxa_mod, STUDY_ID), find_hull) %>%
as_tibble()
marine_hulls
marine_nest <- marine_hulls %>%
group_by(REALM, Biome, taxa_mod, STUDY_ID) %>%
filter(n_distinct(rarefyID) > 1) %>%
nest(rarefyID_x, rarefyID_y) %>%
mutate(hull_centre = purrr::map(data, ~ hull_centre(.x$rarefyID_x, .x$rarefyID_y)))
mar_hull_cent <- marine_nest %>% unnest(hull_centre)
# we want a point for each unique combination of biome/taxa/study: ok
mar_hull_cent %>%
group_by(Biome, taxa_mod) %>%
summarise(n.study = n_distinct(STUDY_ID), #
points = n_distinct(hc_x, hc_y)) %>%
filter(points!=n.study)
# and we need points for the studies that only had one location
marine_singleLoc <- marine_hulls %>%
group_by(REALM, Biome, taxa_mod, STUDY_ID) %>%
filter(n_distinct(rarefyID)==1) %>%
mutate(hc_x = rarefyID_x,
hc_y = rarefyID_y) %>%
select(REALM, Biome, taxa_mod, STUDY_ID, hc_x, hc_y) %>%
ungroup()
# rejoin with other marine location data
BTS_marine_locations <- bind_rows(mar_hull_cent %>% select(-data),
marine_singleLoc)
marine_hulls
marine_hulls %>%
ggplot() +
geom_point(aes(x = rarefyID_x, y = rarefyID_y))
marine_hulls %>%
ggplot() +
geom_point(aes(x = rarefyID_x, y = rarefyID_y)) +
geom_polygon(aes(x = rarefyID_x, y= rarefyID_y, group = STUDY_ID))
# check
ggplot() +
# facet_wrap(~Biome, scales = 'free') +
geom_map(data=world, map=world, aes(long, lat, map_id=region), colour='white', fill='#7f7f7f', size=0.05, alpha=0.5) +
geom_polygon(data = filter(marine_hulls, Biome=='Arctic'), alpha = 0.5,
aes(x = rarefyID_x, rarefyID_y, fill = taxa_mod)) +
geom_point(data = filter(coords, REALM=='Marine' & Biome=='Arctic'),
aes(x = rarefyID_x, y = rarefyID_y, colour = taxa_mod), size = 0.5, alpha = 0.8) +
geom_point(data = filter(mar_hull_cent, Biome=='Arctic'),
aes(x = hc_x, y = hc_y, shape = taxa_mod)) +
scale_shape_manual(values = shapes) +
theme(legend.position = 'top', legend.direction = 'horizontal')
marine_hulls %>% distinct(taxa_mod)
# check
# set shapes for plotting groups of taxa
shapes = c('Invertebrates' = 0, 'Fish' = 1, 'Benthos' = 2, 'Birds' = 15, 'Mammals' = 17,
'Plant' = 5, 'All' = 6, 'Marine invertebrates/plants' = 7, 'Amphibians' = 8)
ggplot() +
# facet_wrap(~Biome, scales = 'free') +
geom_map(data=world, map=world, aes(long, lat, map_id=region), colour='white', fill='#7f7f7f', size=0.05, alpha=0.5) +
geom_polygon(data = filter(marine_hulls, Biome=='Arctic'), alpha = 0.5,
aes(x = rarefyID_x, rarefyID_y, fill = taxa_mod)) +
geom_point(data = filter(coords, REALM=='Marine' & Biome=='Arctic'),
aes(x = rarefyID_x, y = rarefyID_y, colour = taxa_mod), size = 0.5, alpha = 0.8) +
geom_point(data = filter(mar_hull_cent, Biome=='Arctic'),
aes(x = hc_x, y = hc_y, shape = taxa_mod)) +
scale_shape_manual(values = shapes) +
theme(legend.position = 'top', legend.direction = 'horizontal')
ggplot() +
# facet_wrap(~Biome, scales = 'free') +
geom_map(data=world, map=world, aes(long, lat, map_id=region), colour='white', fill='#7f7f7f', size=0.05, alpha=0.5) +
geom_polygon(data = filter(marine_hulls), alpha = 0.5,
aes(x = rarefyID_x, rarefyID_y)) +
geom_point(data = filter(coords, REALM=='Marine' & Biome=='Arctic'),
aes(x = rarefyID_x, y = rarefyID_y, colour = taxa_mod), size = 0.5, alpha = 0.8) +
geom_point(data = filter(mar_hull_cent, Biome=='Arctic'),
aes(x = hc_x, y = hc_y, shape = taxa_mod)) +
scale_shape_manual(values = shapes) +
theme(legend.position = 'top', legend.direction = 'horizontal')
ggplot() +
facet_wrap(~Biome, scales = 'free') +
geom_map(data=world, map=world, aes(long, lat, map_id=region), colour='white', fill='#7f7f7f', size=0.05, alpha=0.5) +
geom_polygon(data = filter(marine_hulls), alpha = 0.5,
aes(x = rarefyID_x, rarefyID_y)) +
geom_point(data = filter(coords, REALM=='Marine' & Biome=='Arctic'),
aes(x = rarefyID_x, y = rarefyID_y, colour = taxa_mod), size = 0.5, alpha = 0.8) +
geom_point(data = filter(mar_hull_cent, Biome=='Arctic'),
aes(x = hc_x, y = hc_y, shape = taxa_mod)) +
scale_shape_manual(values = shapes) +
theme(legend.position = 'top', legend.direction = 'horizontal')
marine_hulls
# want simplified geography for plotting taxa estimates: one or more points for biome/taxa combinations
# one where the biome is geographically cohesive, >1 when biomes are geographically disjointed (terrestrial mainly)
rm(list=ls())
# wrangle coefficients & calculate correlations
source('~/Dropbox/1current/BioTime/local_code/hierarchical/2aBiomeTaxa/BT_calcCorr.R')
world <- map_data('world')
# function to find the convex hull of a polygon
find_hull <- function(df) df[chull(df$rarefyID_x, df$rarefyID_y), ]
# function to find centre of hull
hull_centre <- function(rarefyID_x, rarefyID_y){
hc_x = geosphere::geomean(cbind(x = rarefyID_x, y = rarefyID_y))[1]
hc_y = geosphere::geomean(cbind(x = rarefyID_x, y = rarefyID_y))[2]
return(cbind.data.frame(hc_x, hc_y))
}
##  get unique coords for each biome, taxa combination
coords <- rarefied_medians %>% distinct(REALM, Biome, taxa_mod, rarefyID, rarefyID_x, rarefyID_y)
# there is one fuckup here:
coords %>% group_by(Biome, taxa_mod) %>% filter(n_distinct(rarefyID) < 3) # the filtering process what not logically correct!
coords %>%
filter(REALM == 'Terrestrial') %>%
ggplot() +
facet_wrap(~Biome, scales ='free') +
geom_map(data=world, map=world, aes(long, lat, map_id=region), colour='white', fill='#7f7f7f', size=0.05, alpha=0.5) +
geom_point(aes(x = rarefyID_x, y = rarefyID_y), size = 0.5) +
theme(legend.position = 'none')
coords %>%
filter(REALM == 'Marine') %>%
ggplot() +
# facet_wrap(~Biome, scales = 'free') +
# geom_map(data=world, map=world, aes(long, lat, map_id=region), colour='white', fill='#7f7f7f', size=0.05, alpha=0.5) +
geom_point(aes(x = rarefyID_x, y = rarefyID_y, colour = Biome, shape = taxa_mod)) +
coord_equal() +
theme(legend.position = 'none')
coords %>%
filter(REALM == 'Marine') %>%
ggplot() +
# facet_wrap(~Biome, scales = 'free') +
# geom_map(data=world, map=world, aes(long, lat, map_id=region), colour='white', fill='#7f7f7f', size=0.05, alpha=0.5) +
geom_point(aes(x = rarefyID_x, y = rarefyID_y, colour = Biome, shape = taxa_mod)) +
scale_shape_manual(values = shapes) +
coord_equal() +
theme(legend.position = 'none')
shapes = c('Invertebrates' = 0, 'Fish' = 1, 'Benthos' = 2, 'Birds' = 15, 'Mammals' = 17,
'Plant' = 5, 'All' = 6, 'Marine invertebrates/plants' = 7, 'Amphibians' = 8)
shapes_mod2 = c('Invertebrates' = 0, 'Fish' = 1, 'Benthos' = 2, 'Birds' = 15, 'Mammals' = 17,
'Plant' = 5, 'Multiple taxa' = 6, 'Marine invertebrates/plants' = 7, 'Amphibians' = 8)
coords %>%
filter(REALM == 'Marine') %>%
ggplot() +
# facet_wrap(~Biome, scales = 'free') +
# geom_map(data=world, map=world, aes(long, lat, map_id=region), colour='white', fill='#7f7f7f', size=0.05, alpha=0.5) +
geom_point(aes(x = rarefyID_x, y = rarefyID_y, colour = Biome, shape = taxa_mod)) +
scale_shape_manual(values = shapes) +
coord_equal() +
theme(legend.position = 'none')
##--------marine realm wrangle------------------
marine_hulls <- plyr::ddply(filter(coords, REALM=='Marine'),
plyr::.(REALM, Biome, taxa_mod, STUDY_ID), find_hull) %>%
as_tibble()
# code to get geography for plotting study estimates: get one or more points for biome-taxa-study combinations
source('~/Dropbox/1current/BioTime/BioGeo-BioDiv-Change/R/bt/code/02b_studyLevel_coef_wrangle.R')
world <- map_data('world')
# function to find the convex hull of a polygon
find_hull <- function(df) df[chull(df$rarefyID_x, df$rarefyID_y), ]
# function to find centre of hull
hull_centre <- function(rarefyID_x, rarefyID_y){
hc_x = geosphere::geomean(cbind(x = rarefyID_x, y = rarefyID_y))[1]
hc_y = geosphere::geomean(cbind(x = rarefyID_x, y = rarefyID_y))[2]
return(cbind.data.frame(hc_x, hc_y))
}
##  get unique coords for each biome, taxa combination
studies_ <- BT_study_estimate %>%
distinct(STUDY_ID)
coords <- rarefied_medians %>%
distinct(REALM, Biome, taxa_mod, STUDY_ID, rarefyID, rarefyID_x, rarefyID_y) %>%
# filter to the studies for which we have study-level slope estimates
filter(STUDY_ID %in% studies_$STUDY_ID)
##--------marine realm wrangle------------------
marine_hulls <- plyr::ddply(filter(coords, REALM=='Marine'),
plyr::.(REALM, Biome, taxa_mod, STUDY_ID), find_hull) %>%
as_tibble()
marine_nest <- marine_hulls %>%
group_by(REALM, Biome, taxa_mod, STUDY_ID) %>%
filter(n_distinct(rarefyID) > 1) %>%
nest(rarefyID_x, rarefyID_y) %>%
mutate(hull_centre = purrr::map(data, ~ hull_centre(.x$rarefyID_x, .x$rarefyID_y)))
mar_hull_cent <- marine_nest %>% unnest(hull_centre)
# we want a point for each unique combination of biome/taxa/study: ok
mar_hull_cent %>%
group_by(Biome, taxa_mod) %>%
summarise(n.study = n_distinct(STUDY_ID), #
points = n_distinct(hc_x, hc_y)) %>%
filter(points!=n.study)
# and we need points for the studies that only had one location
marine_singleLoc <- marine_hulls %>%
group_by(REALM, Biome, taxa_mod, STUDY_ID) %>%
filter(n_distinct(rarefyID)==1) %>%
mutate(hc_x = rarefyID_x,
hc_y = rarefyID_y) %>%
select(REALM, Biome, taxa_mod, STUDY_ID, hc_x, hc_y) %>%
ungroup()
# rejoin with other marine location data
BTS_marine_locations <- bind_rows(mar_hull_cent %>% select(-data),
marine_singleLoc)
ggplot() +
# facet_wrap(~Biome) +
geom_polygon(data = marine_hulls, alpha = 0.5,
aes(x = rarefyID_x, rarefyID_y, fill = taxa_mod)) +
geom_map(data=world, map=world, aes(long, lat, map_id=region), colour='white', fill='#7f7f7f', size=0.05, alpha=0.5) +
geom_point(data = filter(coords, REALM=='Marine'),
aes(x = rarefyID_x, y = rarefyID_y, colour = taxa_mod), size = 0.5, alpha = 0.8) +
geom_point(data = mar_hull_cent,
aes(x = hc_x, y = hc_y, shape = taxa_mod)) +
scale_shape_manual(values = shapes) +
# coord_map('gilbert', xlim=c(-180, 180)) +
theme(legend.position = 'top', legend.direction = 'horizontal')
ggplot() +
# facet_wrap(~Biome) +
geom_polygon(data = marine_hulls, alpha = 0.5,
aes(x = rarefyID_x, rarefyID_y, fill = taxa_mod)) +
geom_map(data=world, map=world, aes(long, lat, map_id=region), colour='white', fill='#7f7f7f', size=0.05, alpha=0.5) +
geom_point(data = filter(coords, REALM=='Marine'),
aes(x = rarefyID_x, y = rarefyID_y, colour = taxa_mod, group = STUDY_ID), size = 0.5, alpha = 0.8) +
geom_point(data = mar_hull_cent,
aes(x = hc_x, y = hc_y, shape = taxa_mod)) +
scale_shape_manual(values = shapes) +
# coord_map('gilbert', xlim=c(-180, 180)) +
theme(legend.position = 'top', legend.direction = 'horizontal')
ggplot() +
# facet_wrap(~Biome) +
geom_polygon(data = marine_hulls, alpha = 0.5,
aes(x = rarefyID_x, rarefyID_y, fill = taxa_mod, , group = STUDY_ID)) +
geom_map(data=world, map=world, aes(long, lat, map_id=region), colour='white', fill='#7f7f7f', size=0.05, alpha=0.5) +
geom_point(data = filter(coords, REALM=='Marine'),
aes(x = rarefyID_x, y = rarefyID_y, colour = taxa_mod), size = 0.5, alpha = 0.8) +
geom_point(data = mar_hull_cent,
aes(x = hc_x, y = hc_y, shape = taxa_mod)) +
scale_shape_manual(values = shapes) +
# coord_map('gilbert', xlim=c(-180, 180)) +
theme(legend.position = 'top', legend.direction = 'horizontal')
ggplot() +
# facet_wrap(~Biome) +
geom_polygon(data = marine_hulls, alpha = 0.5,
aes(x = rarefyID_x, rarefyID_y, fill = interaction(STUDY_ID, taxa_mod), group = STUDY_ID)) +
geom_map(data=world, map=world, aes(long, lat, map_id=region), colour='white', fill='#7f7f7f', size=0.05, alpha=0.5) +
geom_point(data = filter(coords, REALM=='Marine'),
aes(x = rarefyID_x, y = rarefyID_y, colour = taxa_mod), size = 0.5, alpha = 0.8) +
geom_point(data = mar_hull_cent,
aes(x = hc_x, y = hc_y, shape = taxa_mod)) +
scale_shape_manual(values = shapes) +
# coord_map('gilbert', xlim=c(-180, 180)) +
theme(legend.position = 'top', legend.direction = 'horizontal')
